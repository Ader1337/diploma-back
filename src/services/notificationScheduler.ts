import cron from 'node-cron';
import Task from '../models/Task';
import User from '../models/User';
import webpush, { PushSubscription } from 'web-push';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
const sendPushNotification = async (subscription: PushSubscription, payload: string) => {
  try {
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è VAPID –∫–ª—é—á—ñ–≤ –º–∞—î –±—É—Ç–∏ —Ç—É—Ç –∞–±–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∫–æ–Ω—Ñ—ñ–≥—É
    if (!process.env.VAPID_PUBLIC_KEY || !process.env.VAPID_PRIVATE_KEY) {
      console.error('VAPID –∫–ª—é—á—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –≤ .env —Ñ–∞–π–ª—ñ.');
      return;
    }
    webpush.setVapidDetails(
      `mailto:${process.env.VAPID_MAILTO || 'test@example.com'}`,
      process.env.VAPID_PUBLIC_KEY,
      process.env.VAPID_PRIVATE_KEY
    );

    await webpush.sendNotification(subscription, payload);
    console.log('Push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.');
  } catch (error: any) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error.body || error.message);
    // –Ø–∫—â–æ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥—ñ–π—Å–Ω–∞, —ó—ó –≤–∞—Ä—Ç–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if (error.statusCode === 404 || error.statusCode === 410) {
      console.log('–í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏...');
      await User.updateOne(
        { 'pushSubscriptions.endpoint': subscription.endpoint },
        { $pull: { pushSubscriptions: { endpoint: subscription.endpoint } } }
      );
    }
  }
};

// --- –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–¥–∞–Ω—å ---

// 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–¥–∞–Ω—å, –¥–ª—è —è–∫–∏—Ö —Å–∫–æ—Ä–æ –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞ –≥–æ–¥–∏–Ω—É)
const checkUpcomingTasks = async () => {
  console.log('–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å...');
  const now = new Date();
  const oneHourFromNow = new Date(now.getTime() + 60 * 60 * 1000);

  try {
    const upcomingTasks = await Task.find({
      isCompleted: false, // –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
      reminderSent: false, // –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–æ—Å—å
      dueDate: {
        $gte: now, // –î–µ–¥–ª–∞–π–Ω —â–µ –Ω–µ –Ω–∞—Å—Ç–∞–≤
        $lte: oneHourFromNow // –ê–ª–µ –Ω–∞—Å—Ç–∞–Ω–µ –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥–æ–¥–∏–Ω–∏
      }
    }).populate('user'); // `populate` –¥–æ–¥–∞—î –æ–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–º—ñ—Å—Ç—å user ID

    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${upcomingTasks.length} –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.`);

    for (const task of upcomingTasks) {
      const user = task.user as any; // –¢–∏–ø—ñ–∑—É—î–º–æ —è–∫ any –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–æ–ª—ñ–≤
      if (user && user.pushSubscriptions && user.pushSubscriptions.length > 0) {
        const payload = JSON.stringify({
         notification: { // <--- –û—Å—å —Ü–µ–π –∫–ª—é—á–æ–≤–∏–π –æ–±'—î–∫—Ç!
          title: `üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: ${task.title}`,
          body: `–î–µ–¥–ª–∞–π–Ω –≤–∞—à–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞—Å—Ç–∞–Ω–µ –º–µ–Ω—à –Ω—ñ–∂ –∑–∞ –≥–æ–¥–∏–Ω—É!`,
          icon: 'assets/icons/icon-96x96.png', // –¶–µ–π —à–ª—è—Ö –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π —É –≤–∞—à–æ–º—É –∑—ñ–±—Ä–∞–Ω–æ–º—É Angular-–¥–æ–¥–∞—Ç–∫—É
          data: { url: `/tasks/${task._id}` }
        }
        });

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await Promise.all(
            user.pushSubscriptions.map((sub: PushSubscription) => sendPushNotification(sub, payload))
        );

        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ
        task.reminderSent = true;
        await task.save();
      }
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:', error);
  }
};


// 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
const checkOverdueTasks = async () => {
  console.log('–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å...');
  const now = new Date();

  try {
    const overdueTasks = await Task.find({
      isCompleted: false, // –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ
      overdueNotificationSent: false, // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–æ—Å—å
      dueDate: { $lt: now } // –î–µ–¥–ª–∞–π–Ω –≤–∂–µ –º–∏–Ω—É–≤
    }).populate('user');

    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${overdueTasks.length} –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.`);

    for (const task of overdueTasks) {
      const user = task.user as any;
      if (user && user.pushSubscriptions && user.pushSubscriptions.length > 0) {
        const payload = JSON.stringify({
          notification: { // <--- –Ü —Ç—É—Ç —Ç–∞–∫–æ–∂!
          title: `‚è∞ –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: ${task.title}`,
          body: `–í–∏ –Ω–µ –≤—Å—Ç–∏–≥–ª–∏ –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—á–∞—Å–Ω–æ.`,
          icon: 'assets/icons/icon-96x96.png',
          data: { url: `/tasks/${task._id}` }
        }
        });

        await Promise.all(
            user.pushSubscriptions.map((sub: PushSubscription) => sendPushNotification(sub, payload))
        );

        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–Ω—è –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ
        task.overdueNotificationSent = true;
        await task.save();
      }
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å:', error);
  }
};


// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ ---

export const startNotificationScheduler = () => {
  // –ó–∞–ø—É—Å–∫–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –º–æ–∂–Ω–∞ —Ä—ñ–¥—à–µ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ–∂–Ω—ñ 5-15 —Ö–≤–∏–ª–∏–Ω.
  // Cron-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å: '*/1 * * * *' - –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
  cron.schedule('*/1 * * * *', () => {
    console.log('----------------------------------------------------');
    console.log(`–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ –æ ${new Date().toLocaleTimeString()}`);
    checkUpcomingTasks();
    checkOverdueTasks();
    console.log('----------------------------------------------------');
  });

  console.log('–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Å–ø–æ–≤—ñ—â–µ–Ω—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!  cron.schedule(*/1 * * * *)');
};