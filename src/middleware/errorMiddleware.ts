import { Request, Response, NextFunction } from 'express';

interface CustomError extends Error {
  statusCode?: number;
  kind?: string; // –î–ª—è –ø–æ–º–∏–ª–æ–∫ Mongoose (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ObjectId)
}

export const errorHandler = (err: CustomError, req: Request, res: Response, next: NextFunction) => {
  const statusCode = err.statusCode || res.statusCode === 200 ? 500 : res.statusCode;
  let message = err.message || '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';

  // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Mongoose
  if (err.name === 'CastError' && err.kind === 'ObjectId') {
    message = `–†–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID.`;
    // statusCode = 404; // –ú–æ–∂–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ —Ç—É—Ç
    return res.status(404).json({ message }); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 404 –¥–ª—è CastError
  }

  if (err.name === 'ValidationError') { // Mongoose validation error
    const errors = Object.values((err as any).errors).map((el: any) => el.message);
    message = `–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ${errors.join('. ')}`;
    return res.status(400).json({ message, errors });
  }

  // –î—É–±–ª—é–≤–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ (Mongoose)
  if ((err as any).code === 11000) {
    const field = Object.keys((err as any).keyValue)[0];
    message = `–ü–æ–ª–µ '${field}' –≤–∂–µ —ñ—Å–Ω—É—î. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è.`;
    return res.status(400).json({ message });
  }


  res.status(statusCode).json({
    message: message,
    stack: process.env.NODE_ENV === 'production' ? 'ü•û' : err.stack, // –ü–æ–∫–∞–∑—É—î–º–æ stack –ª–∏—à–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ
  });
};

export const notFound = (req: Request, res: Response, next: NextFunction) => {
  const error = new Error(`–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ - ${req.originalUrl}`);
  res.status(404);
  next(error);
};