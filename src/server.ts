import express, { Express, Request, Response } from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import morgan from 'morgan';
import connectDB from './config/db'; // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î

// –Ü–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç—ñ–≤
import authRoutes from './routes/authRoutes';
import taskRoutes from './routes/taskRoutes';
import noteRoutes from './routes/noteRoutes';
import notificationRoutes from './routes/notificationRoutes';

// –Ü–º–ø–æ—Ä—Ç middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
import { notFound, errorHandler } from './middleware/errorMiddleware';
import { startNotificationScheduler } from './services/notificationScheduler';

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
dotenv.config();

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
connectDB();

startNotificationScheduler();

const app: Express = express();

// Middleware
app.use(cors()); // –î–æ–∑–≤–æ–ª—è—î CORS –∑–∞–ø–∏—Ç–∏ (–Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!)
app.use(express.json()); // –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É JSON —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
app.use(express.urlencoded({ extended: false })); // –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É URL-encoded —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É

if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev')); 
}


// –ì–æ–ª–æ–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç API (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—Ä–µ—Ñ—ñ–∫—Å /api/v1)
const API_PREFIX = process.env.API_PREFIX || '/api/v1';

app.get(API_PREFIX, (req: Request, res: Response) => {
  res.send('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ API –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞! üöÄ');
});


/* app.use((req, res, next) => {
  console.log(`${req.method} ${req.url}`);
  next();
});
 */

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
app.use(`${API_PREFIX}/auth`, authRoutes);
app.use(`${API_PREFIX}/tasks`, taskRoutes);
app.use(`${API_PREFIX}/notes`, noteRoutes);
app.use(`${API_PREFIX}/notifications`, notificationRoutes);


// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ (404)
app.use(notFound);
// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ (–º–∞—î –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º)
app.use(errorHandler as any);


const PORT = process.env.PORT || 5001; // –ü–æ—Ä—Ç –∑ .env –∞–±–æ 5001 –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ '${process.env.NODE_ENV || 'development'}' –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});